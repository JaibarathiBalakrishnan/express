const express = require ('express');
const bodyParser = require ('body-parser');
// importing graphql, graphql funtion which actually used in the place of middleware function
// middleware funciton will do is it will take incoming request and funnel them through graphQL query parser automatically forward to right resolver
//Developer has to set resovler schema up
const {  graphqlHTTP } = require ('express-graphql');//===> Modern java script syntax which is called object destrcturing  
// adding a schema 
//const graphQL = require ('graphql'); ==> declaring in object
//buildschema function which is used to build schema , it has specify in app.use , schema object
const { buildSchema } = require ('graphql');  //===> Modern java script syntax which is called object destrcturing  
// importing mongooes (mongo DB)

const mongoose = require ('mongoose');

const Event = require('./models/event');


//@using of function expresstion in app
const app = express();

//@middle-ware for json objects
app.use (bodyParser.json());

//using graphql middleware , when you are using graphql middle ware , you cannot use app.get ==> root route
//Syntax : app.use('/graphql',midddleware function ({Java Script Objects}) code)
//query to fetch data, mutation to change sata
app.use('/graphql', graphqlHTTP ({
    schema: buildSchema(`
        type Event {
            _id: ID!
            title: String!
            description: String!
            price: Float!
            date: String! 

        }

        input EventInput {
            title: String!
            description: String!
            price: Float!
            date: String!
        }

        type RootQuery {
            events: [Event!]!
            
        }
        type RootMutation {
            createEvent(eventInput: EventInput): Event
        }
        schema {
            query: RootQuery 
            mutation:  RootMutation
        }

        `), //====> schemas are defined

//====> rootvalue is where resovler names are specified, resovler is just a function
    rootValue:  {
        //query(read) events
        events: () => {
            Event.find().then().catch(err => {
                throw err;
            });
        },
// create event resolver
//creating new event java script object , using model created in event.js file . 
            // Event construct has defined by inheriting the event.js
            //Event is constructor generated by mongoose model  
        createEvent: (args) => {
            const event = new Event({
                title: args.eventInput.title,
                description: args.eventInput.description,
                price: +args.eventInput.price,
                date: new Date(args.eventInput.date)
            });
// save method will hit the database and write into db
                event.save().then(
                    result => {
                        console.log(result);
                        // return result ; ==> method 1 ==> it will display all data and metadata
                        // Method 2 : returing new java script object using spread operator to get result ._doc
                        //it is property provided by mongoose, which has all core properties to make a doc and it will leave all meta data
                        return { ...result._doc };
                    } )
                .catch(err => {
                    console.log(err);
                    throw err;

                });               
               
        }

    },
    //output @/graphql endpoint can be seen only through graphical GUI tool
    graphiql: true  
     
}));

// Database connection

mongoose.connect(
    `mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSOWRD}@cluster0.ix678.mongodb.net/${process.env.MONGO_DB}?retryWrites=true&w=majority`
    )
    //declaring promise
    .then(() => {
        app.listen(3001);
        console.log('Connected to Mongo DB');
    }).catch(err => {
        console.log(err);
    });

 

